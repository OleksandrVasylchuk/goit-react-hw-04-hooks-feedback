{"version":3,"sources":["Components/FeedbackOptions/FeedBackOptions.styled.js","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Notification/Notification.styled.js","Components/Notification/Notification.jsx","Components/Statistics/Statistics.styled.js","Components/Statistics/Statistics.jsx","Components/Section/Section.styled.js","Components/Section/Section.jsx","App.jsx","index.js"],"names":["Container","Button","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Div","Notification","message","proTotypes","PropTypes","string","isRequired","List","Item","Statistics","good","neutral","bad","total","positivePercentage","Sections","styled","section","Title","h1","Section","title","children","App","state","leaveFeedback","item","setState","prevState","totalFeedback","positiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAEO,IAAMA,EAAS,mGAKTC,EAAM,uwB,OCoBJC,MAvBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACnC,OACC,cAACJ,EAAD,UACEG,EAAQE,KAAI,SAAAC,GAAM,OAClB,cAACL,EAAD,CACCM,KAAK,SAELC,KAAMF,EACNG,QAAS,kBAAKL,EAAgBE,IAJ/B,SAKGA,GAHGA,S,iBCRH,IAAMI,EAAG,sICCD,SAASC,EAAT,GAAkC,IAAXC,EAAU,EAAVA,QACpC,OACE,cAACF,EAAD,UAAME,IAGVD,EAAaE,WAAa,CACxBD,QAASE,IAAUC,OAAOC,YCPrB,IAAMC,EAAI,yGAMJC,EAAI,sICeFC,I,IAAAA,EApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,eAACP,EAAD,WACE,eAACC,EAAD,oBAAaE,EAAb,OACA,eAACF,EAAD,uBAAgBG,EAAhB,OACA,eAACH,EAAD,mBAAYI,KACZ,eAACJ,EAAD,qBAAcK,KACd,eAACL,EAAD,iCAA0BM,EAA1B,Y,cCROC,EAAWC,IAAOC,QAAV,iEAKRC,EAAQF,IAAOG,GAAV,uHCWHC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,eAACP,EAAD,WACGM,GAAS,cAACH,EAAD,UAAQG,IACjBC,MCkDQC,E,4MAjDbC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,cAAgB,SAACC,GACf,EAAKC,UAAS,SAACC,GAAD,sBAAmBF,EAAOE,EAAUF,GAAQ,O,EAG7DG,cAAgB,WACb,MAA+B,EAAKL,MACpC,OADA,EAAQd,KAAR,EAAcC,QAAd,EAAuBC,K,EAGzBkB,2BAA6B,WAC3B,IAAQpB,EAAS,EAAKc,MAAdd,KACR,OAAOqB,KAAKC,MAAc,IAAPtB,EAAc,EAAKmB,kBAAoB,G,4CAG5D,WACE,MAA+BI,KAAKT,MAA5Bd,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,qCACE,cAAC,EAAD,CAASS,MAAM,wBAAf,SACE,cAAC,EAAD,CACE5B,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBuC,KAAKR,kBAI1B,cAAC,EAAD,CAASJ,MAAM,aAAf,SAC4B,IAAzBY,KAAKJ,gBACJ,cAAC,EAAD,CACEnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,KAAKJ,gBACZf,mBAAoBmB,KAAKH,+BAG3B,cAAC7B,EAAD,CAAcC,QAAQ,+B,GA1ChBgC,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a390b9f7.chunk.js","sourcesContent":["import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Container = styled.div`\r\n  margin: 0 auto;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background: transparent;\r\n  color: #fff;\r\n  border: 3px solid #fff;\r\n  border-radius: 50px;\r\n  padding: 0.8rem 2rem;\r\n  font: 24px \"Margarine\", sans-serif;\r\n  outline: none;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: 0.2s ease-in-out;\r\n  letter-spacing: 2px;\r\n  animation: jittery 4s infinite;\r\n  &:not(:last-child) {\r\n    margin-right: 40px;\r\n  }\r\n  &:hover {\r\n    animation: heartbeat 0.2s infinite;\r\n    background-color: #ffb005;\r\n  }\r\n\r\n  @keyframes jittery {\r\n    5%,\r\n    50% {\r\n      transform: scale(1);\r\n    }\r\n    10% {\r\n      transform: scale(0.9);\r\n    }\r\n    15% {\r\n      transform: scale(1.15);\r\n    }\r\n    20% {\r\n      transform: scale(1.15) rotate(-5deg);\r\n    }\r\n    25% {\r\n      transform: scale(1.15) rotate(5deg);\r\n    }\r\n    30% {\r\n      transform: scale(1.15) rotate(-3deg);\r\n    }\r\n    35% {\r\n      transform: scale(1.15) rotate(2deg);\r\n    }\r\n    40% {\r\n      transform: scale(1.15) rotate(0);\r\n    }\r\n  }\r\n  @keyframes heartbeat {\r\n    50% {\r\n      transform: scale(1.1);\r\n    }\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Container, Button } from './FeedBackOptions.styled'\r\n\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t{options.map(option => (\r\n\t\t\t\t<Button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tkey={option}\r\n\t\t\t\t\tname={option}\r\n\t\t\t\t\tonClick={() =>onLeaveFeedback(option)}>\r\n\t\t\t\t\t\t{option}\r\n\t\t\t\t</Button>\r\n\t\t\t))}\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\n\r\nFeedbackOptions.propTypes = {\r\n\toption: PropTypes.arrayOf(PropTypes.string),\r\n\tonLeaveFeedback: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default FeedbackOptions;\r\n\r\n","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const Div = styled.div`\r\n  margin: 20px;\r\n  text-align: center;\r\n  padding: 10px;\r\n  color: red;\r\n  font-weight: 500;\r\n`;\r\n"," import PropTypes from 'prop-types';\r\nimport { Div } from './Notification.styled'\r\n\r\nexport default function Notification({message}) {\r\n  return (\r\n    <Div>{message}</Div>\r\n  )\r\n}\r\nNotification.proTotypes = {\r\n  message: PropTypes.string.isRequired \r\n}\r\n","import styled from \"@emotion/styled/macro\";\r\n\r\nexport const List = styled.ul`\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  list-style: none;\r\n  font-size: 20px;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport {List, Item} from './Statistics.styled'\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <List>\r\n      <Item>Good: {good} </Item>\r\n      <Item>Neutral: {neutral} </Item>\r\n      <Item>Bad: {bad}</Item>\r\n      <Item>Total: {total}</Item>\r\n      <Item>Pozitive feedback: {positivePercentage}% </Item>\r\n    </List>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import styled from \"@emotion/styled\";\r\n\r\nexport const Sections = styled.section`\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  margin-top: 30px;\r\n  margin-bottom: 30px;\r\n  font-style: italic;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Sections, Title} from './Section.styled'\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <Sections>\r\n      {title && <Title>{title}</Title>}\r\n      {children}\r\n    </Sections>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import React, { Component } from \"react\";\n// import styled from '@emotion/styled/macro'\nimport FeedbackOptions from \"./Components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./Components/Notification/Notification\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport Section from \"./Components/Section/Section\";\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  leaveFeedback = (item) => {\n    this.setState((prevState) => ({ [item]: prevState[item] + 1 }));\n  };\n\n totalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  positiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good * 100) / this.totalFeedback()) || 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            onLeaveFeedback={this.leaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.totalFeedback() !== 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.totalFeedback()}\n              positivePercentage={this.positiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}